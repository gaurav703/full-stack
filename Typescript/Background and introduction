/// TypeScript is a typed superset of JavaScript
/// TypeScript is a structurally typed languag

/// important features of TypeScript

// 1. Static Typing

// Static typing is a feature that allows you to define the type of a variable and the type of a function parameter.
// Example:
let a: number = 10;
let b: string = "Hello";
let c: boolean = true;

// 2. Object Oriented
// example:
class Person {
  name: string;
  age: number;
  constructor(name: string, age: number) {
    this.name = name;
    this.age = age;
  }
  display(): void {
    console.log(this.name);
    console.log(this.age);
  }
}

let p = new Person("John", 30);


// 3. Interfaces

// Interfaces are used to define the structure of an object.

// Example:
interface Person {
  name: string;
  age: number;
}
// 4. Classes

// Classes are used to define the structure of an object.

// Example:
class Person {
  name: string;
  age: number;
  constructor(name: string, age: number) {
    this.name = name;
    this.age = age;
  }
  display(): void {
    console.log(this.name);
    console.log(this.age);
  }
}
// 5. Modules
// 6. Arrow Functions

// Arrow functions are used to define functions in a more concise way.

// Example:
let add = (a: number, b: number): number => {
  return a + b;
};


// 7. Generics

// Generics are used to define a type that can be used with different types of data.

// Example:
function identity<T>(arg: T): T {
  return arg;
}
let output = identity<string>("Hello");
console.log(output); // Hello


// 8. Type Inference

// Type inference is a feature that allows the compiler to automatically determine the type of a variable based on its value.

// Example:
let a = 10; // number
let b = "Hello"; // string
// 9. Type Compatibility
// 10. Non-nullable Types
// 11. Enums


// What does TypeScript not fix?


// Incomplete, invalid or missing types in external libraries
// Sometimes, type inference needs assistance
// Mysterious type errors

